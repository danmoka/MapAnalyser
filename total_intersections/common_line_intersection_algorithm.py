# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CommonIntersection
                                 A QGIS plugin
 This plugin computes Total number of intersections of linear layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-08-30
        copyright            : (C) 2020 by YSU
        email                : daniilpot@yandex.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'YSU'
__date__ = '2020-08-30'
__copyright__ = '(C) 2020 by YSU'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import processing

from PyQt5.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFileDestination,
                       QgsWkbTypes,
                       QgsProcessingException,
                       QgsGeometry,
                       QgsFeature,
                       QgsPointXY,
                       QgsFields)

from ..utils import tr, raise_exception, define_help_info, write_to_file


class CommonIntersectionAlgorithm(QgsProcessingAlgorithm):
    """
    This is a class that calculates the total number of
    intersections of linear layers
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    HELP_FILE = 'total_intersections_help.txt'


    def __init__(self):
        super().__init__()
        directory = os.path.dirname(__file__)
        file_name = os.path.join(directory, self.HELP_FILE)
        self._shortHelp = define_help_info(file_name)


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                tr('Input layer')
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OUTPUT,
                tr('Output File'),
                'csv(*.csv)',
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        layer = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        output = self.parameterAsFileOutput(parameters, self.OUTPUT, context)
        intersections = self.get_common_intersection(layer, feedback)

        feedback.setProgress(100)

        header = [
            'layer',
            'number of intersections'
        ]
        row = [{
            header[0]: layer.name(),
            header[1]: len(intersections)
        }]

        if output:
            feedback.pushInfo(tr('Writing to file'))
            write_to_file(output, header, row, ';')

        return {
            'The number of intersections': len(intersections)
            }


    def get_common_intersection(self, layer, feedback):
        """
        This method calculates the number of line intersections

        :param layer: Vector layer
        :param feedback: Feedback from a processing algorithm
        """

        if not layer:
            raise_exception('layer is empty')
        if not feedback:
            raise_exception('feedback is empty')
        if layer.geometryType() != QgsWkbTypes.LineGeometry:
            raise_exception('layer geometry is not line geometry')

        feedback.pushInfo(tr('Receiving endpoints of the lines'))

        end_points = {}

        for feature in layer.getFeatures():
            geom = feature.geometry()

            for part in geom.parts():
                verts = list(part.vertices())
                start_v = verts[0]
                start_v_cortege = (start_v.x(), start_v.y())

                if start_v_cortege in end_points:
                    end_points[start_v_cortege] += 1
                else:
                    end_points[start_v_cortege] = 1

                end_v = verts[-1]
                end_v_cortege = (end_v.x(), end_v.y())

                if end_v_cortege in end_points:
                    end_points[end_v_cortege] += 1
                else:
                    end_points[end_v_cortege] = 1

        feedback.setProgress(30)
        feedback.pushInfo(tr('Getting intersection points (this can take a long time (the more lines, the more time))'))

        intersections_proc_params = {
            'INPUT': layer,
            'INTERSECT': layer,
            'OUTPUT': 'memory:'
            }
        result = processing.run(
            'qgis:lineintersections',
            intersections_proc_params
            )
        intersections_layer = result['OUTPUT']

        feedback.setProgress(80)

        set_of_intersections = set((f.geometry().asPoint().x(), f.geometry().asPoint().y()) for f in intersections_layer.getFeatures())

        feedback.pushInfo(tr('Getting true intersection points'))

        intersections = self.get_true_intersections(set_of_intersections, end_points) if set_of_intersections else []

        feedback.setProgress(90)

        return intersections


    def get_true_intersections(self, intersections, end_points):
        """
        This method calculates true line intersections

        :param intersections: Total set of intersections
        :param end_points: End points of lines
        """

        if not intersections:
            raise_exception('intersections is empty')
        if not end_points:
            raise_exception('end_points is empty')

        true_intersections = set()

        for point_cortege in intersections:
            if point_cortege in end_points:
                if end_points[point_cortege] != 2:
                    true_intersections.add(point_cortege)
            else:
                true_intersections.add(point_cortege)

        return true_intersections

    def merge_layers(self, layers, feedback):
        """
        This method merges layers

        :param layers: Vector layers
        :param feedback: Feedback from a processing algorithm
        """

        if not layers:
            raise_exception('layers is empty')
        if not feedback:
            raise_exception('feedback is empty')

        feedback.pushInfo(tr('Merging layers'))
        feedback.setProgress(10)

        layer_names = [
            layer.name() for layer in layers
            if layer.geometryType() == QgsWkbTypes.LineGeometry
            ]

        if not layer_names:
            raise_exception("failed to get linear layers for merge")

        merge_proc_params = {
            'LAYERS': layer_names,
            'OUTPUT': 'memory:'
            }
        result = processing.run('qgis:mergevectorlayers', merge_proc_params, None)
        merged_layers_map = result['OUTPUT']

        feedback.setProgress(20)

        return merged_layers_map


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Compute Total number of intersections of linear layers'


    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return tr(self.name())


    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return tr(self.groupId())


    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Map characteristics'


    def shortHelpString(self):
        return self._shortHelp


    def createInstance(self):
        return CommonIntersectionAlgorithm()
