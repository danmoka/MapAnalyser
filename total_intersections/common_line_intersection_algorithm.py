# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CommonIntersection
                                 A QGIS plugin
 This plugin computes Total number of intersections of linear layers
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-08-30
        copyright            : (C) 2020 by YSU
        email                : daniilpot@yandex.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'YSU'
__date__ = '2020-08-30'
__copyright__ = '(C) 2020 by YSU'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os
import processing

from PyQt5.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterMultipleLayers,
                       QgsWkbTypes,
                       QgsProcessingException,
                       QgsGeometry,
                       QgsFeature,
                       QgsPointXY,
                       QgsFields)


class CommonIntersectionAlgorithm(QgsProcessingAlgorithm):
    """
    This is a class that calculates the total number of
    intersections of linear layers
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'


    def __init__(self):
        super().__init__()

        self._shortHelp = "This is an algorithm that calculates the total number of intersections of linear layers"
        self.define_help_info("total_intersections_help.txt")

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterMultipleLayers(
                self.INPUT,
                self.tr('Input layers'),
                QgsProcessing.TypeVectorLine
            )
        )

        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        layers = self.parameterAsLayerList(parameters, self.INPUT, context)
        merged_layer = self.merge_layers(layers, feedback)
        intersections = self.get_common_intersection(merged_layer, feedback)
        (sink, dest_id) = self.parameterAsSink(
            parameters, self.OUTPUT,
            context, QgsFields(), 
            QgsWkbTypes.Point, 
            merged_layer.sourceCrs()
        )

        feedback.pushInfo('Creating a layer')

        for point in intersections:
            if feedback.isCanceled():
                break

            feature = QgsFeature()
            feature.setGeometry(
                QgsGeometry().fromPointXY(QgsPointXY(point[0], point[1]))
            )
            sink.addFeature(feature, QgsFeatureSink.FastInsert)

        feedback.setProgress(100)
        layer_names = ' '.join([layer.name() for layer in layers])

        return {
            'Layers': layer_names,
            'The number of intersections': len(intersections)
            }
        # systcoord = "Point?crs=" + layer.sourceCrs().authid()
        # intersection_points_layer = QgsVectorLayer(systcoord, 'intersections', 'memory')
        # data_provider = intersection_points_layer.dataProvider()

        # for point in intersections:
        #     feature = QgsFeature()
        #     feature.setGeometry(QgsGeometry().fromPointXY(QgsPointXY(point[0], point[1])))
        #     data_provider.addFeature(feature)

        # QgsProject.instance().addMapLayer(intersection_points_layer)


        # for feature in layer.getFeatures():
        #     geom = feature.geometry()
        #     parts_of_geometry = list(geom.parts())
        #     print(str(len(parts_of_geometry)) + ' : ' + str(parts_of_geometry))

        # source = self.parameterAsSource(parameters, self.INPUT, context)
        # (sink, dest_id) = self.parameterAsSink(parameters, self.OUTPUT,
        #         context, source.fields(), source.wkbType(), source.sourceCrs())
        #
        # # Compute the number of steps to display within the progress bar and
        # # get features from source
        # total = 100.0 / source.featureCount() if source.featureCount() else 0
        # features = source.getFeatures()
        #
        # for current, feature in enumerate(features):
        #     # Stop the algorithm if cancel button has been clicked
        #     if feedback.isCanceled():
        #         break
        #
        #     # Add a feature in the sink
        #     sink.addFeature(feature, QgsFeatureSink.FastInsert)
        #
        #     # Update the progress bar
        #     feedback.setProgress(int(current * total))

        # Return the results of the algorithm. In this case our only result is
        # the feature sink which contains the processed features, but some
        # algorithms may return multiple feature sinks, calculated numeric
        # statistics, etc. These should all be included in the returned
        # dictionary, with keys matching the feature corresponding parameter
        # or output names.


    def get_common_intersection(self, layer, feedback):
        """
        This method calculates the number of line intersections

        :param layer: Vector layer
        :param feedback: Feedback from a processing algorithm
        """

        if not layer:
            self.raise_exception('layer is empty')
        if not feedback:
            self.raise_exception('feedback is empty')
        if layer.geometryType() != QgsWkbTypes.LineGeometry:
            self.raise_exception('layer geometry is not line geometry')

        feedback.pushInfo(self.tr('Receiving endpoints of the lines'))
        # end_points = Dict.empty(
        #     key_type=types.UniTuple(int64,2),
        #     value_type=types.int64,
        # )
        end_points = {}

        for feature in layer.getFeatures():
            geom = feature.geometry()

            for part in geom.parts():
                verts = list(part.vertices())
                start_v = verts[0]
                start_v_cortege = (start_v.x(), start_v.y())

                if start_v_cortege in end_points:
                    end_points[start_v_cortege] += 1
                else:
                    end_points[start_v_cortege] = 1

                end_v = verts[-1]
                end_v_cortege = (end_v.x(), end_v.y())

                if end_v_cortege in end_points:
                    end_points[end_v_cortege] += 1
                else:
                    end_points[end_v_cortege] = 1

        feedback.setProgress(30)
        feedback.pushInfo(self.tr('Getting intersection points (this can take a long time (the more lines, the more time))'))

        intersections_proc_params = {
            'INPUT': layer,
            'INTERSECT': layer,
            'OUTPUT': 'memory:'
            }
        result = processing.run(
            'qgis:lineintersections',
            intersections_proc_params
            )
        intersections_layer = result['OUTPUT']

        feedback.setProgress(80)

        set_of_intersections = set(
            (f.geometry().asPoint().x(), f.geometry().asPoint().y())
            for f in intersections_layer.getFeatures()
            )

        feedback.pushInfo(self.tr('Getting true intersection points'))

        intersections = self.get_true_intersections(
            set_of_intersections, end_points
            )

        feedback.setProgress(90)

        return intersections

        #
        # params = {'INPUT': layer, 'INTERSECT': layer, 'OUTPUT': 'memory:'}
        # result = processing.run('qgis:lineintersections', params)
        # intersections_layer = result['OUTPUT']
        #
        # for feature in intersections_layer.getFeatures():
        #     geom = feature.geometry()
        #     point = geom.asPoint()
        #     points[(point.x(), point.y())] = [False, 1]

        # points = {} норм, но не считает то, что нужно
        # intersections = set()
        #
        #
        # for feature in layer.getFeatures():
        #     geom = feature.geometry()
        #
        #     for part in geom.parts():
        #         verts = list(part.vertices())
        #         # если пусто?
        #         start = verts[0]
        #         start_cortege = (start.x(), start.y())
        #
        #         if start_cortege in points:
        #             value = points.get(start_cortege)
        #
        #             if value[0]:
        #                 value[1] += 1
        #                 points[start_cortege][1] = value[1]
        #
        #                 if value[1] > 2:
        #                     intersections.add(start_cortege)
        #             else:
        #                 value[1] += 1
        #                 points[start_cortege][1] = value[1]
        #
        #                 intersections.add(start_cortege)
        #         else:
        #             points[start_cortege] = [True, 1]
        #
        #         end = verts[len(verts) - 1]
        #         end_cortege = (end.x(), end.y())
        #
        #         if end_cortege in points:
        #             value = points.get(end_cortege)
        #
        #             if value[0]:
        #                 value[1] += 1
        #                 points[end_cortege][1] = value[1]
        #
        #                 if value[1] > 2:
        #                     intersections.add(end_cortege)
        #             else:
        #                 value[1] += 1
        #                 points[end_cortege][1] = value[1]
        #
        #                 intersections.add(end_cortege)
        #         else:
        #             points[end_cortege] = [True, 1]
        #
        #
        #         for i in range(1, len(verts) - 2):
        #             v = verts[i]
        #             v_cortege = (v.x(), v.y())
        #
        #             if v_cortege in points:
        #                 points[v_cortege][1] += 1
        #                 intersections.add(v_cortege)
        #             else:
        #                 points[v_cortege] = [False, 1] норм, но не считает то, что нужно

                # if end_cortege in points:
                #     points[end_cortege] += 1
                #     count = points.get(end_cortege)
                #
                #     if count > 2:
                #         intersections.add((end.x(), end.y()))
                # else:
                #     points[end_cortege] = 1
                #
                # for i in range(1, len(verts) - 2):
                #     v = verts[i]
                #     v_cortege = (v.x(), v.y(), False)
                #
                #     if v_cortege in points:
                #         points[v_cortege] += 1
                #         intersections.add((v.x(), v.y()))
                #     else:
                #         points[v_cortege] = 1

        # for feature in layer.getFeatures():
        #     geom = feature.geometry()
        #
        #     for part in geom.parts(): # если не multi, то будет 1 кусок
        #         verts = list(part.vertices())
        #         first = (verts[0].x(), verts[0].y())
        #         p = points.get(first)
        #
        #         if p:
        #             continue
        #         elif p is None:
        #             points()

                # for v in part.vertices():
                #     p = points.get()
                #     if p:
                #         continue
                #     elif p is None:



        # unique_points = set()
        # intersections = set()
        #
        # for feature in layer.getFeatures():
        #     geom = feature.geometry()
        #
        #     verts = set()
        #
        #     for part in geom.parts():
        #         for v in part.vertices():
        #             verts.add((v.x(), v.y()))
        #
        #     if len(list(geom.parts())) > 1:
        #         print(verts)
        #
        #     for v in verts:
        #         if v in unique_points:
        #             intersections.add(v)
        #         else:
        #             unique_points.add(v)
        #
        # print(len(intersections))

        # systcoord = "Point?crs=" + layer.sourceCrs().authid()
        # intersection_points_layer = QgsVectorLayer(systcoord, 'intersections', 'memory')
        # data_provider = intersection_points_layer.dataProvider()
        #
        # for point in intersections:
        #     feature = QgsFeature()
        #     feature.setGeometry(QgsGeometry().fromPointXY(QgsPointXY(point[0], point[1])))
        #     data_provider.addFeature(feature)
        #
        # QgsProject.instance().addMapLayer(intersection_points_layer)

        #
        # end_points = []
        #
        # for feature in layer.getFeatures():
        #     geom = feature.geometry()
        #     parts_of_geometry = list(geom.parts())
        #
        #     for part in parts_of_geometry:  # можем сразу итерироваться по geom.parts(), если нет необходимости выделять
        #         # в отдельный список
        #         verts = list(part.vertices())  # можно оставить QgsPoint структуру, если с ней
        #         # удобно работать
        #         end_points.append(verts[0])
        #         end_points.append(verts[(len(verts) - 1)])
        #
        # params = {'INPUT': layer, 'INTERSECT': layer, 'OUTPUT': 'memory:'}
        # result = processing.run('qgis:lineintersections', params)
        # intersections_layer = result['OUTPUT']
        #
        # print(len(list(intersections_layer.getFeatures())))
        #
        # final_intersection_points = []
        #
        # for feature in intersections_layer.getFeatures():
        #     geom = feature.geometry()
        #     parts_of_geometry = list(geom.parts())
        #
        #     for part in parts_of_geometry:
        #         for v in part.vertices():
        #             if (end_points.count(v) != 2):
        #                 final_intersection_points.append(v)
        #
        # print(len(final_intersection_points))

        # systcoord = "Point?crs=" + layer.sourceCrs().authid()
        # intersection_points_layer = QgsVectorLayer(systcoord, 'intersections', 'memory')
        # data_provider = intersection_points_layer.dataProvider()
        #
        # for point in final_intersection_points:
        #     feature = QgsFeature()
        #     feature.setGeometry(QgsGeometry().fromPointXY(QgsPointXY(point)))
        #     data_provider.addFeature(feature)
        #
        # QgsProject.instance().addMapLayer(intersection_points_layer)

    # def get_verts(self, features):
    #     for feature in features():
    #         geom = feature.geometry()
    #         parts_of_geometry = list(geom.parts())
    #
    #         for part in parts_of_geometry:  # можем сразу итерироваться по geom.parts(), если нет необходимости выделять
    #             # в отдельный список
    #             verts = [(v.x(), v.y()) for v in part.vertices()]  # можно оставить QgsPoint структуру, если с ней
    #             # удобно работать
    #
    #     return verts

    #types.Set(types.UniTuple(numba.int64,2))


    def get_true_intersections(self, intersections, end_points):
        """
        This method calculates true line intersections

        :param intersections: Total set of intersections
        :param end_points: End points of lines
        """

        if not intersections:
            self.raise_exception('intersections is empty')
        if not end_points:
            self.raise_exception('end_points is empty')

        true_intersections = set()

        for point_cortege in intersections:
            if point_cortege in end_points:
                if end_points[point_cortege] != 2:
                    true_intersections.add(point_cortege)
            else:
                true_intersections.add(point_cortege)

        return true_intersections

    def merge_layers(self, layers, feedback):
        """
        This method merges layers

        :param layers: Vector layers
        :param feedback: Feedback from a processing algorithm
        """

        if not layers:
            self.raise_exception('layers is empty')
        if not feedback:
            self.raise_exception('feedback is empty')

        feedback.pushInfo(self.tr('Merging layers'))
        feedback.setProgress(10)

        layer_names = [
            layer.name() for layer in layers
            if layer.geometryType() == QgsWkbTypes.LineGeometry
            ]
        merge_proc_params = {
            'LAYERS': layer_names, 
            'OUTPUT': 'memory:'
            }
        result = processing.run('qgis:mergevectorlayers', merge_proc_params, None)
        merged_layers_map = result['OUTPUT']

        feedback.setProgress(20)

        return merged_layers_map


    def raise_exception(self, message):
        raise QgsProcessingException(self.tr(message))


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Compute Total number of intersections of linear layers'


    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())


    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())


    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Map characteristics'


    def shortHelpString(self):
        return self._shortHelp


    def tr(self, string):
        return QCoreApplication.translate('Processing', string)


    def createInstance(self):
        return CommonIntersectionAlgorithm()


    def define_help_info(self, help_file):
        """
        Sets the help text.

        :help_file: File name
        """
        directory = os.path.dirname(__file__)
        file_name = os.path.join(directory, help_file)
        try:
            with open(file_name, 'r') as f:
                text = f.read()
                self._shortHelp += text
        except:
            pass


    # def flags(self):
    #     return super().flags() | QgsProcessingAlgorithm.FlagNoThreading

# types.Set(types.UniTuple(int64,2))(types.Set(types.UniTuple(int64,2)), types.DictType(types.UniTuple(int64,2), int64)),nopython=True
# @jit()
# def get_true_intersections(intersections, end_points):
#     true_intersections = set()

#     for point_cortege in intersections:
#         if point_cortege in end_points:
#             if end_points[point_cortege] != 2:
#                 true_intersections.add(point_cortege)
#         else:
#             true_intersections.add(point_cortege)

#     return true_intersections
