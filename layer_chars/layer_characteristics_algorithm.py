# -*- coding: utf-8 -*-

"""
/***************************************************************************
 LayerCharacteristics
                                 A QGIS plugin
 This plugin computes layer characteristics
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-08-21
        copyright            : (C) 2020 by YSU
        email                : daniilpot@yandex.ru
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'YSU'
__date__ = '2020-08-21'
__copyright__ = '(C) 2020 by YSU'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

import os

from PyQt5.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsProcessingAlgorithm,
                       QgsProcessingException,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterVectorLayer,
                       QgsWkbTypes)

from .utils import get
from ..utils import tr, raise_exception, write_to_file, define_help_info


class LayerCharacteristicsAlgorithm(QgsProcessingAlgorithm):
    """
    This is a class that calculates the topological and
    semantic characteristics of a layer and
    for linear layers:
        the number of bends in the line and the average bend characteristics:
        height, length, area and baseline length
    for polygon layers:
        the total area, total perimeter, average polygon area in the layer and
        average polygon perimeter in the layer
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    OUTPUT = 'OUTPUT'
    INPUT = 'INPUT'
    HELP_FILE = 'layer_characteristics_help.txt'

    def __init__(self):
        super().__init__()
        directory = os.path.dirname(__file__)
        file_name = os.path.join(directory, self.HELP_FILE)
        self._shortHelp = define_help_info(file_name)
        self.progress = 0


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                tr('Input layer')
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OUTPUT,
                tr('Output File'),
                'csv(*.csv)',
            )
        )


    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        self.progress = 0
        layer = self.parameterAsVectorLayer(parameters, self.INPUT, context)
        output = self.parameterAsFileOutput(parameters, self.OUTPUT, context)

        if not layer:
            raise_exception('can\'t get a layer')

        feedback.pushInfo(tr('The algorithm is running'))
        total = 80.0 / layer.featureCount() if layer.featureCount() else 0

        points_num = 0
        common_length = 0
        bend_num = 0
        ave_bend_area = 0.0
        ave_bend_base_line_len = 0.0
        ave_bend_height = 0.0
        ave_bend_length = 0.0
        total_polygon_area = 0.0
        total_polygon_perimetr = 0.0
        count = 0.0

        for current, feature in enumerate(layer.getFeatures()):
            if feedback.isCanceled():
                break

            geom = feature.geometry()
            is_single_type = QgsWkbTypes.isSingleType(geom.wkbType())

            if geom.type() == QgsWkbTypes.LineGeometry:
                common_length += geom.length()

                if is_single_type:
                    data_list = [(v.x(), v.y()) for v in geom.vertices()]

                    if len(data_list) < 3:
                        continue

                    result = get(data_list)
                    count = count + 1
                    points_num += result[0]
                    bend_num += result[1]
                    ave_bend_area += result[2]
                    ave_bend_base_line_len += result[3]
                    ave_bend_height += result[4]
                    ave_bend_length += result[5]
                else:
                    for part in geom.parts():
                        data_list = [(v.x(), v.y()) for v in part.vertices()]

                        if len(data_list) < 3:
                            continue

                        result = get(data_list)
                        count = count + 1
                        points_num += result[0]
                        bend_num += result[1]
                        ave_bend_area += result[2]
                        ave_bend_base_line_len += result[3]
                        ave_bend_height += result[4]
                        ave_bend_length += result[5]
            elif geom.type() == QgsWkbTypes.PolygonGeometry:
                common_length += geom.length()

                if is_single_type:
                    data_list = [(v.x(), v.y()) for v in geom.vertices()]

                    if len(data_list) < 3:
                        continue

                    result = get(data_list)
                    count = count+1
                    points_num += result[0]
                    bend_num += result[1]
                    ave_bend_area += result[2]
                    ave_bend_base_line_len += result[3]
                    ave_bend_height += result[4]
                    ave_bend_length += result[5]
                    total_polygon_area += geom.area()
                    total_polygon_perimetr += geom.length()
                else:
                    for part in geom.parts():
                        data_list = [(v.x(), v.y()) for v in part.vertices()]

                        if len(data_list) < 3:
                            continue

                        result = get(data_list)
                        count = count + 1
                        points_num += result[0]
                        bend_num += result[1]
                        ave_bend_area += result[2]
                        ave_bend_base_line_len += result[3]
                        ave_bend_height += result[4]
                        ave_bend_length += result[5]
                    total_polygon_area += geom.area()
                    total_polygon_perimetr += geom.length()
            else:
                break

            self.progress = int(current * total)
            feedback.setProgress(self.progress)

        header = [
            'layer',
            'features count',
            'unique values ratios',
            'common length',
            'number of points',
            'number of bends',
            'average area of bends',
            'average length of bends baseline',
            'average height of bends',
            'average length of the bends',
            'common polygons area',
            'common polygons perimetr',
            'average polygons area',
            'average polygons perimetr',
        ]
        row = [{
            header[0]: layer.name(),
            header[1]: self.get_features_count(layer, feedback),
            header[2]: (self.get_formatted_ratios_result(
                self.get_unique_values_ratios(layer, feedback))),
            header[3]: common_length,
            header[4]: points_num,
            header[5]: bend_num,
            header[6]: ave_bend_area / bend_num if bend_num > 0 else 0.0,
            header[7]: ave_bend_base_line_len / bend_num if bend_num > 0 else 0.0,
            header[8]: ave_bend_height / bend_num if bend_num > 0 else 0.0,
            header[9]: ave_bend_length / bend_num if bend_num > 0 else 0.0,
            header[10]: total_polygon_area,
            header[11]: total_polygon_perimetr,
            header[12]: total_polygon_area / count if count > 0 else 0.0,
            header[13]: total_polygon_perimetr / count if count > 0 else 0.0,
        }]

        if output:
            feedback.pushInfo(tr('Writing to file'))
            write_to_file(output, header, row, ';')

        return row[0]


    def get_formatted_ratios_result(self, pair):
        """
        This method builds a formatted string of a pair of ratios

        :param pair: Pair of ratios
        """

        if not pair:
            raise_exception("pair is empty")

        first_ratio = '0' if pair[0] == 0.000 else "%.3f" % pair[0]
        second_ratio = '0' if pair[1] == 0.000 else "%.3f" % pair[1]

        return f"{first_ratio}, {second_ratio}"


    def get_features_count(self, layer, feedback):
        """
        This method calculates the number of layer objects

        :param layer: Vector layer
        :param feedback: Feedback from a processing algorithm
        """

        if not layer:
            raise_exception('layer is empty')
        if not feedback:
            raise_exception('feedback is empty')

        data_provider = layer.dataProvider()
        features_count = data_provider.featureCount()

        self.progress += 5
        feedback.setProgress(self.progress)

        return features_count


    def get_unique_values_ratios(self, layer, feedback):
        """
        This method calculates the ratio of unique values
        using data provider fields

        :param layer: Vector layer
        :param feedback: Feedback from a processing algorithm
        """

        if not layer:
            raise_exception('layer is empty')
        if not feedback:
            raise_exception('feedback is empty')

        data_provider = layer.dataProvider()
        feature_count = data_provider.featureCount()
        fields = data_provider.fields()
        fields_count = len(fields)

        if feature_count == 0 or fields_count == 0:
            return (0, 0)

        unique_values_count = 0
        total = 15 / fields_count
        for i in range(fields_count):
            if feedback.isCanceled():
                return (-1, -1)

            unique_values_count += len(data_provider.uniqueValues(i, feature_count))

            self.progress += total
            feedback.setProgress(self.progress)

        unique_values_ratio = round(unique_values_count / feature_count, 3)
        unique_values_ratio_by_fields_count = round(unique_values_ratio / fields_count, 3)

        return (unique_values_ratio, unique_values_ratio_by_fields_count)


    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Compute layer characteristics'


    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return tr(self.name())


    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return tr(self.groupId())


    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Map characteristics'


    def shortHelpString(self):
        return self._shortHelp


    def createInstance(self):
        return LayerCharacteristicsAlgorithm()
